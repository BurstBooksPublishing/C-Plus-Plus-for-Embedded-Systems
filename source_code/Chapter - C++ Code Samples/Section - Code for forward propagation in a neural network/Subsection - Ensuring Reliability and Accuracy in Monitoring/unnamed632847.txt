#include 
#include 
#include 

using namespace tensorflow;
using namespace tensorflow::ops;

void forwardPropagation(const Tensor& input, const Tensor& weights, 
                        const Tensor& biases, Tensor& output) {
    // Perform matrix multiplication: output = input * weights
    MatMul matmul_op(input, weights);
    
    // Add biases to the result of matrix multiplication
    Add add_op(matmul_op, biases);
    
    // Apply activation function (e.g., ReLU)
    Relu relu_op(add_op);
    
    // Store the final output
    output = relu_op;
}

int main() {
    // Example input tensor (batch size = 1, input size = 3)
    Tensor input(DT_FLOAT, TensorShape({1, 3}));
    input.flat() << 1.0, 2.0, 3.0;

    // Example weight tensor (input size = 3, output size = 2)
    Tensor weights(DT_FLOAT, TensorShape({3, 2}));
    weights.flat() << 0.1, 0.2, 0.3, 0.4, 0.5, 0.6;

    // Example bias tensor (output size = 2)
    Tensor biases(DT_FLOAT, TensorShape({2}));
    biases.flat() << 0.1, 0.2;

    // Output tensor to store the result
    Tensor output(DT_FLOAT, TensorShape({1, 2}));

    // Perform forward propagation
    forwardPropagation(input, weights, biases, output);

    // Print the output
    std::cout << "Output: " << output.matrix() << std::endl;

    return 0;
}