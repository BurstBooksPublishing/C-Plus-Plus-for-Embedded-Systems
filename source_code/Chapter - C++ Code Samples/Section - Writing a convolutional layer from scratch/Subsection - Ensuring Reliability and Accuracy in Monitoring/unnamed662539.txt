#include <iostream>
#include <vector>
#include <iomanip>

// Define a function to perform 2D convolution
std::vector<std::vector<float>> conv2D(const std::vector<std::vector<float>>& input,
                                       const std::vector<std::vector<float>>& kernel) {
    int inputHeight = input.size();
    int inputWidth = input[0].size();
    int kernelHeight = kernel.size();
    int kernelWidth = kernel[0].size();
    int outputHeight = inputHeight - kernelHeight + 1;
    int outputWidth = inputWidth - kernelWidth + 1;

    std::vector<std::vector<float>> output(outputHeight, std::vector<float>(outputWidth, 0.0f));

    // Perform convolution
    for (int i = 0; i < outputHeight; ++i) {
        for (int j = 0; j < outputWidth; ++j) {
            float sum = 0.0f;
            for (int ki = 0; ki < kernelHeight; ++ki) {
                for (int kj = 0; kj < kernelWidth; ++kj) {
                    sum += input[i + ki][j + kj] * kernel[ki][kj];
                }
            }
            output[i][j] = sum;
        }
    }

    return output;
}

int main() {
    // Example input matrix (3x3)
    std::vector<std::vector<float>> input = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    // Example kernel (2x2)
    std::vector<std::vector<float>> kernel = {
        {1, 0},
        {0, -1}
    };

    // Perform convolution
    auto output = conv2D(input, kernel);

    // Print the output matrix
    for (const auto& row : output) {
        for (float val : row) {
            std::cout << std::fixed << std::setprecision(1) << val << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}