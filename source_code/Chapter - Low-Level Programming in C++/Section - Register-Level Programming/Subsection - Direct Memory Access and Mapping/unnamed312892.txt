// Define the base address of the DMA controller
constexpr uint32_t DMA_BASE_ADDR = 0x40000000;

// Define the offsets for the DMA registers
constexpr uint32_t DMA_SRC_ADDR_OFFSET = 0x00;
constexpr uint32_t DMA_DST_ADDR_OFFSET = 0x04;
constexpr uint32_t DMA_CTRL_REG_OFFSET = 0x08;
constexpr uint32_t DMA_STATUS_REG_OFFSET = 0x0C;

// Function to write to a memory-mapped register
void write_reg(uint32_t addr, uint32_t value) {
    volatile uint32_t* reg = reinterpret_cast(addr);
    *reg = value;
}

// Function to read from a memory-mapped register
uint32_t read_reg(uint32_t addr) {
    volatile uint32_t* reg = reinterpret_cast(addr);
    return *reg;
}

// Configure DMA for a data transfer
void configure_dma(uint32_t src_addr, uint32_t dst_addr, uint32_t transfer_size) {
    // Set the source address
    write_reg(DMA_BASE_ADDR + DMA_SRC_ADDR_OFFSET, src_addr);

    // Set the destination address
    write_reg(DMA_BASE_ADDR + DMA_DST_ADDR_OFFSET, dst_addr);

    // Configure the control register (enable transfer, set transfer size)
    uint32_t ctrl_value = (1 << 0) | (transfer_size << 8);
    write_reg(DMA_BASE_ADDR + DMA_CTRL_REG_OFFSET, ctrl_value);

    // Wait for the transfer to complete
    while (!(read_reg(DMA_BASE_ADDR + DMA_STATUS_REG_OFFSET) & (1 << 0))) {
        // Busy wait
    }
}